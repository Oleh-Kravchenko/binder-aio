# This file allows users to call find_package(Binder) and pick up our targets.
@PACKAGE_INIT@

set_and_check(CLANG_INCLUDE_DIR "@PACKAGE_CLANG_INCLUDE_DIR@")
set_and_check(BINDER_INCLUDE_DIR "@PACKAGE_BINDER_INSTALL_INCLUDE_DIR@")

SET(Binder_FOUND TRUE)

SET(Binder_FindOpts)
IF(Binder_FIND_REQUIRED)
	LIST(APPEND Binder_FindOpts REQUIRED)
ENDIF()

IF(Binder_FIND_QUIETLY)
	LIST(APPEND Binder_FindOpts QUIET)
ENDIF()

IF(NOT BINDER_CROSS_PREFIX)
	EXECUTE_PROCESS(COMMAND
		${CMAKE_CXX_COMPILER} -dumpmachine
	OUTPUT_VARIABLE
		BINDER_CROSS_PREFIX
	RESULT_VARIABLE
		RES
	OUTPUT_STRIP_TRAILING_WHITESPACE)

	IF(RES)
		MESSAGE(FATAL_ERROR "Can't detect machine type!")
	ENDIF()
ENDIF()

IF(NOT PYTHON_SITE_PACKAGES_DIR)
	FIND_PACKAGE(PythonInterp ${Binder_FindOpts})
	IF(NOT PythonInterp_FOUND)
		SET(Binder_FOUND FALSE)
		RETURN()
	ENDIF()

	EXECUTE_PROCESS(COMMAND ${PYTHON_EXECUTABLE} -c
		"from distutils import sysconfig as sc; print(sc.get_python_lib(prefix='', plat_specific=True))"
	OUTPUT_VARIABLE
		COUT
	RESULT_VARIABLE
		RES
	OUTPUT_STRIP_TRAILING_WHITESPACE)
	IF(RES)
		MESSAGE(FATAL_ERROR "Can't detect Python site packages path!")
	ENDIF()

	SET(PYTHON_SITE_PACKAGES_DIR "${COUT}"
		CACHE PATH "Python site packages directory")
ENDIF()

FIND_PROGRAM(BINDER_EXECUTABLE binder)
IF(NOT BINDER_EXECUTABLE)
	MESSAGE(FATAL_ERROR "Can't find binder executable!")
ENDIF()

FIND_PACKAGE(PythonLibs ${Binder_FindOpts})
IF(NOT PythonLibs_FOUND)
	SET(Binder_FOUND FALSE)
	RETURN()
ENDIF()

# 
# ADD_BINDER_LIBRARY(NAME <name>
# 	HEADERS header1 [header2 ...])
# 	[CONFIG <config>]
# 	[BIND namespace1 [namespace2 ...]]
# 	[SKIP namespace1 [namespace2 ...]]
# 	[COMPILE_OPTIONS option1 [option2 ...]]
# 	[INCLUDES_DIRECTORIES directory1 [directory2 ...]]
# 	[LINK_LIBRARIES lib1 [lib2 ...]]
# 	[SOURCES source1 [source2 ...]]
# 
FUNCTION(ADD_BINDER_LIBRARY)
	CMAKE_PARSE_ARGUMENTS(BINDER
		""
		"NAME;CONFIG"
		"BIND;SKIP;HEADERS;COMPILE_OPTIONS;INCLUDES_DIRECTORIES;LINK_LIBRARIES;SOURCES"
		${ARGN})

	IF(BINDER_UNPARSED_ARGUMENTS)
		MESSAGE(FATAL_ERROR "Unknown arguments: ${BINDER_UNPARSED_ARGUMENTS}")
	ENDIF(BINDER_UNPARSED_ARGUMENTS)

	FOREACH(REQUIRED NAME HEADERS)
		IF(NOT BINDER_${REQUIRED})
			MESSAGE(FATAL_ERROR "${REQUIRED} is not specified!")
		ENDIF()
	ENDFOREACH()

	SET(BINDER_OPTIONS)
	FOREACH(bind ${BINDER_BIND})
		LIST(APPEND BINDER_OPTIONS "-bind;${bind}")
	ENDFOREACH()
	FOREACH(skip ${BINDER_SKIP})
		LIST(APPEND BINDER_OPTIONS "-skip;${skip}")
	ENDFOREACH()

	IF(BINDER_CONFIG)
		LIST(APPEND BINDER_OPTIONS "-config;${BINDER_CONFIG}")
	ENDIF()

	STRING(REPLACE " " ";" COMPILER_OPTIONS "${CMAKE_CXX_FLAGS}")
	FOREACH(inc ${BINDER_INCLUDES_DIRECTORIES})
		LIST(APPEND COMPILER_OPTIONS "-I;${inc}")
	ENDFOREACH()
	FOREACH(lib ${BINDER_LINK_LIBRARIES})
		IF(NOT TARGET ${lib})
			CONTINUE()
		ENDIF()

		GET_TARGET_PROPERTY(incdirs ${lib} INTERFACE_INCLUDE_DIRECTORIES)
		FOREACH(incdir ${incdirs})
			LIST(APPEND COMPILER_OPTIONS "$<$<BOOL:${incdir}>:-I${incdir}>")
		ENDFOREACH()
	ENDFOREACH()

	ADD_CUSTOM_COMMAND(OUTPUT "${CMAKE_CURRENT_BINARY_DIR}/cppbinder_${BINDER_NAME}.cpp"
	COMMAND
		${BINDER_EXECUTABLE}
		-root-module "${BINDER_NAME}"
		-prefix "${CMAKE_CURRENT_BINARY_DIR}/cppbinder_"
		-single-file
		${BINDER_OPTIONS}
		${BINDER_HEADERS}
		--
		-isystem ${CLANG_INCLUDE_DIR}
		-target ${BINDER_CROSS_PREFIX}
		${BINDER_COMPILE_OPTIONS}
		${COMPILER_OPTIONS}
	DEPENDS
		${BINDER_HEADERS}
		${BINDER_SOURCES}
		${BINDER_CONFIG})

	ADD_LIBRARY(cppbinder_${BINDER_NAME} SHARED
	${BINDER_SOURCES}
	"${CMAKE_CURRENT_BINARY_DIR}/cppbinder_${BINDER_NAME}.cpp")

	TARGET_COMPILE_OPTIONS(cppbinder_${BINDER_NAME}
	PRIVATE
		${BINDER_COMPILE_OPTIONS})

	SET_TARGET_PROPERTIES(cppbinder_${BINDER_NAME}
	PROPERTIES
		PREFIX ""
		OUTPUT_NAME "${BINDER_NAME}")

	TARGET_INCLUDE_DIRECTORIES(cppbinder_${BINDER_NAME}
	PRIVATE
		${PYTHON_INCLUDE_DIRS}
		${BINDER_INCLUDES_DIRECTORIES}
		${BINDER_INCLUDE_DIR})

	TARGET_LINK_LIBRARIES(cppbinder_${BINDER_NAME}
	PRIVATE
		${PYTHON_LIBRARIES}
		${BINDER_LINK_LIBRARIES})

	INSTALL(TARGETS cppbinder_${BINDER_NAME}
	EXPORT
		"${PROJECT_NAME}"
	LIBRARY DESTINATION
		"${PYTHON_SITE_PACKAGES_DIR}"
	COMPONENT
		Runtime)
ENDFUNCTION()
